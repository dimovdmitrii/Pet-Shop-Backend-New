// –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neon PostgreSQL
const { neon } = require('@neondatabase/serverless');

async function testNeonConnection() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neon PostgreSQL...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
  if (!process.env.DATABASE_URL) {
    console.error('‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è DATABASE_URL –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –≤ Vercel');
    return;
  }
  
  console.log('‚úÖ DATABASE_URL –Ω–∞–π–¥–µ–Ω–∞');
  console.log('üîó URL:', process.env.DATABASE_URL.substring(0, 20) + '...');
  
  try {
    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const sql = neon(process.env.DATABASE_URL);
    console.log('‚úÖ Neon –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const result = await sql`SELECT NOW() as current_time`;
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!');
    console.log('üïê –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞:', result[0].current_time);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
    const tables = await sql`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
    `;
    console.log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:', tables.map(t => t.table_name));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
    if (tables.some(t => t.table_name === 'categories')) {
      const categoryCount = await sql`SELECT COUNT(*) FROM categories`;
      console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', categoryCount[0].count);
    }
    
    if (tables.some(t => t.table_name === 'products')) {
      const productCount = await sql`SELECT COUNT(*) FROM products`;
      console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', productCount[0].count);
    }
    
    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neon:', error.message);
    console.error('üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testNeonConnection();
