// –°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Neon PostgreSQL
const { neon } = require('@neondatabase/serverless');

async function migrateToNeon() {
  if (!process.env.DATABASE_URL) {
    console.error('‚ùå DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    return;
  }

  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –≤ Neon PostgreSQL...');

  try {
    const sql = neon(process.env.DATABASE_URL);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    console.log('üìã –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã...');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    await sql`
      CREATE TABLE IF NOT EXISTS categories (
        id SERIAL PRIMARY KEY,
        name TEXT NOT NULL,
        image TEXT,
        "createdAt" TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        "updatedAt" TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      );
    `;

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    await sql`
      CREATE TABLE IF NOT EXISTS products (
        id SERIAL PRIMARY KEY,
        name TEXT NOT NULL,
        price DECIMAL(10,2),
        "oldPrice" DECIMAL(10,2),
        description TEXT,
        image TEXT,
        "categoryId" INTEGER REFERENCES categories(id),
        "isNew" BOOLEAN DEFAULT false,
        "isSale" BOOLEAN DEFAULT false,
        "createdAt" TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        "updatedAt" TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      );
    `;

    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
    const categoryCount = await sql`SELECT COUNT(*) FROM categories`;
    const productCount = await sql`SELECT COUNT(*) FROM products`;

    console.log(`üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${categoryCount[0].count}`);
    console.log(`üìä –ü—Ä–æ–¥—É–∫—Ç–æ–≤: ${productCount[0].count}`);

    if (categoryCount[0].count === 0) {
      console.log('üìù –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...');
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      await sql`
        INSERT INTO categories (name, image) VALUES
        ('Dogs', '/category_img/1.jpeg'),
        ('Cats', '/category_img/2.jpeg'),
        ('Birds', '/category_img/3.jpeg'),
        ('Fish', '/category_img/4.jpeg'),
        ('Reptiles', '/category_img/5.jpeg'),
        ('Small Animals', '/category_img/6.jpeg'),
        ('Accessories', '/category_img/7.jpeg'),
        ('Food', '/category_img/8.jpeg');
      `;

      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
      await sql`
        INSERT INTO products (name, price, "oldPrice", image, "categoryId", "isNew", "isSale") VALUES
        ('Premium Dog Food', 25.99, 30.99, '/product_img/1.jpeg', 1, true, false),
        ('Cat Toy Set', 15.50, 20.00, '/product_img/2.jpeg', 2, false, true),
        ('Bird Cage', 45.00, 50.00, '/product_img/3.jpeg', 3, true, false),
        ('Fish Tank', 80.00, 100.00, '/product_img/4.jpeg', 4, false, true),
        ('Reptile Heat Lamp', 35.00, 40.00, '/product_img/5.jpeg', 5, true, false),
        ('Hamster Wheel', 12.00, 15.00, '/product_img/6.jpeg', 6, false, true),
        ('Dog Leash', 18.00, 22.00, '/product_img/7.jpeg', 7, true, false),
        ('Cat Litter', 20.00, 25.00, '/product_img/8.jpeg', 8, false, true);
      `;

      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã!');
    }

    console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error.message);
    console.error('–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
if (require.main === module) {
  migrateToNeon();
}

module.exports = migrateToNeon;
