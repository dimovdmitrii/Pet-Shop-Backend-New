// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ Neon PostgreSQL
const { neon } = require('@neondatabase/serverless');

async function createTables() {
  console.log('üöÄ –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ Neon PostgreSQL...');
  
  if (!process.env.DATABASE_URL) {
    console.error('‚ùå DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    console.log('üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è DATABASE_URL —Å –≤–∞—à–∏–º Neon URL');
    return;
  }

  try {
    const sql = neon(process.env.DATABASE_URL);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neon PostgreSQL —É—Å–ø–µ—à–Ω–æ!');

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É categories
    console.log('üìã –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É categories...');
    await sql`
      CREATE TABLE IF NOT EXISTS categories (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        image VARCHAR(500),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `;
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ categories —Å–æ–∑–¥–∞–Ω–∞!');

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É products
    console.log('üìã –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É products...');
    await sql`
      CREATE TABLE IF NOT EXISTS products (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        price DECIMAL(10, 2) NOT NULL,
        oldPrice DECIMAL(10, 2),
        image VARCHAR(500),
        categoryId INTEGER REFERENCES categories(id),
        isNew BOOLEAN DEFAULT false,
        isSale BOOLEAN DEFAULT false,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `;
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ products —Å–æ–∑–¥–∞–Ω–∞!');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
    const categoryCount = await sql`SELECT COUNT(*) FROM categories`;
    const productCount = await sql`SELECT COUNT(*) FROM products`;
    
    console.log(`üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –±–∞–∑–µ: ${categoryCount[0].count}`);
    console.log(`üìä –ü—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –±–∞–∑–µ: ${productCount[0].count}`);

    if (categoryCount[0].count === 0) {
      console.log('üìù –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...');
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      await sql`
        INSERT INTO categories (name, image) VALUES
        ('–ö–æ—Ä–º –¥–ª—è —Å–æ–±–∞–∫', 'https://example.com/dog-food.jpg'),
        ('–ö–æ—Ä–º –¥–ª—è –∫–æ—à–µ–∫', 'https://example.com/cat-food.jpg'),
        ('–ò–≥—Ä—É—à–∫–∏', 'https://example.com/toys.jpg'),
        ('–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã', 'https://example.com/accessories.jpg'),
        ('–ó–¥–æ—Ä–æ–≤—å–µ', 'https://example.com/health.jpg'),
        ('–ì–∏–≥–∏–µ–Ω–∞', 'https://example.com/hygiene.jpg'),
        ('–ü–µ—Ä–µ–Ω–æ—Å–∫–∏', 'https://example.com/carriers.jpg'),
        ('–õ–µ–∂–∞–∫–∏', 'https://example.com/beds.jpg')
      `;
      console.log('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã!');

      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
      await sql`
        INSERT INTO products (name, price, oldPrice, image, categoryId, isNew, isSale) VALUES
        ('–ö–æ—Ä–º –¥–ª—è —Å–æ–±–∞–∫ –ø—Ä–µ–º–∏—É–º', 1500.00, 1800.00, 'https://example.com/dog-food-premium.jpg', 1, false, true),
        ('–ö–æ—Ä–º –¥–ª—è –∫–æ—à–µ–∫ —Å—É–ø–µ—Ä', 1200.00, null, 'https://example.com/cat-food-super.jpg', 2, true, false),
        ('–ú—è—á –¥–ª—è —Å–æ–±–∞–∫', 300.00, null, 'https://example.com/dog-ball.jpg', 3, false, false),
        ('–ö–æ–≥—Ç–µ—Ç–æ—á–∫–∞ –¥–ª—è –∫–æ—à–µ–∫', 800.00, 1000.00, 'https://example.com/cat-scratcher.jpg', 3, false, true),
        ('–û—à–µ–π–Ω–∏–∫ —Å GPS', 2500.00, null, 'https://example.com/gps-collar.jpg', 4, true, false)
      `;
      console.log('‚úÖ –ü—Ä–æ–¥—É–∫—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã!');
    }

    console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error.message);
    console.error('üîç –î–µ—Ç–∞–ª–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
createTables();
